package uk.ac.ebi.fgpt.zooma.datasource;

import uk.ac.ebi.fgpt.zooma.model.AnnotationProvenance;
import uk.ac.ebi.fgpt.zooma.model.AnnotationProvenanceTemplate;
import uk.ac.ebi.fgpt.zooma.model.AnnotationSource;
import uk.ac.ebi.fgpt.zooma.util.AnnotationProvenanceBuilder;

import java.util.Date;
import java.util.concurrent.Semaphore;

/**
 * A concrete implementation of an annotation loading session that supports acquiring and releasing methods, enabling
 * clients to lock this session to a particular datasource whilst minting URIs.
 *
 * @author Tony Burdett
 * @date 10/01/14
 */
public class TransactionalAnnotationLoadingSession extends AbstractAnnotationLoadingSession {
    private final Semaphore lock;

    private AnnotationProvenanceTemplate baseTemplate;

    protected TransactionalAnnotationLoadingSession() {
        super();
        this.baseTemplate =
                AnnotationProvenanceBuilder.createTemplate()
                        .accuracyIs(AnnotationProvenance.Accuracy.NOT_SPECIFIED)
                        .annotatorIs("ZOOMA")
                        .annotationDateIs(new Date());
        this.lock = new Semaphore(1);
    }

    /**
     * Returns a prototypical instance of an {@link AnnotationProvenance} that is bound to this session.  There are a
     * few fields on the prototype that can be overridden by user supplied variables when creating individual
     * annotations.
     *
     * @return a prototype instance of the provenance of annotations generated by this session
     */
    public AnnotationProvenanceTemplate getAnnotationProvenanceTemplate() {
        // todo - check current thread is lock owner?


        return this.baseTemplate;
    }

    public synchronized void acquire(AnnotationSource annotationSource) throws InterruptedException {
        lock.acquire();
        baseTemplate.sourceIs(annotationSource);
        setAnnotationProvenanceTemplate(baseTemplate);
    }

    public synchronized void release() {
        setAnnotationProvenanceTemplate(null);
        baseTemplate.sourceIs(null);
        lock.release();
    }
}
